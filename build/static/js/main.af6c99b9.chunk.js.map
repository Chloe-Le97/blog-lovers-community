{"version":3,"sources":["services/phones.js","components/component.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Person","findUserInput","findUser","persons","handleDelete","map","item","key","name","number","onClick","PersonForm","submitForm","handleName","handleNumber","newName","newNumber","onSubmit","placeholder","value","onChange","type","Filter","handleFind","Notification","success","message","className","App","useState","setPersons","setNewName","setNewNumber","setFindUserInput","setFindUser","setMessage","setSuccess","useEffect","phoneService","then","response","console","log","data","event","target","find","filter","toLowerCase","includes","preventDefault","duplicate","window","confirm","newDuplicateNumber","setTimeout","catch","error","concat","person","filterPerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af6c99b9.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst deleteItem = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n  } \r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update,\r\n  deleteItem: deleteItem\r\n}","import React from 'react';\r\n\r\nexport const Person = ({findUserInput,findUser,persons,handleDelete})=> {\r\n    return (\r\n     <div>\r\n      {findUserInput==''?\r\n      (<div>\r\n        {persons?.map((item)=>(\r\n        <ul key={item.id}>\r\n          {item.name} {item.number}\r\n          <button onClick={()=> handleDelete(item.id)}>delete</button>\r\n        </ul>))}\r\n      </div>)\r\n        :\r\n      (<div>\r\n          {findUser?.map((item)=>(\r\n        <ul key={item.id}>\r\n          {item.name} {item.number}\r\n          <button onClick={()=> handleDelete(item.id)}>delete</button>\r\n        </ul>))}\r\n      </div>)\r\n      }\r\n       \r\n        </div>)\r\n  }\r\n  \r\nexport const PersonForm = ({submitForm,handleName,handleNumber,newName,newNumber}) =>{\r\n    return (\r\n    <form onSubmit={submitForm}>\r\n      <div>name: <input placeholder='Type your name' value={newName} onChange={handleName} /></div>\r\n      <div>number: <input placeholder='Phone number' value={newNumber} onChange={handleNumber}/></div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n    )\r\n  }\r\nexport  const Filter = ({handleFind,findUserInput}) =>{\r\n    return (\r\n      <div>\r\n         <div>find user</div>\r\n        <input placeholder='Username' onChange={handleFind} value={findUserInput}/>\r\n      </div>\r\n    )\r\n  }\r\n  \r\nexport  const Notification = ({success,message})=>{\r\n    return(\r\n      <div className='message'>\r\n        {success==null?(<></>)\r\n        :success==true?(\r\n          <h3 className='success'>{message}</h3>\r\n        ):(\r\n          <h3 className='fail'>{message}</h3>\r\n        )}\r\n      </div>\r\n    )\r\n  }","import React, { useState,useEffect } from 'react';\nimport axios from 'axios';\nimport phoneService from './services/phones';\nimport './App.css';\n\nimport {Person,PersonForm,Filter,Notification}  from './components/component' \n\nconst App = () => {\n  const [ persons, setPersons ] = useState([\n    { name: 'Arto Hellas' }\n  ]) \n  const [newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('');\n  const [findUserInput, setFindUserInput] = useState('');\n  const [findUser, setFindUser] = useState(null)\n  const [message,setMessage] = useState('');\n  const [success,setSuccess] = useState(null);\n\n  useEffect(() => {\n    phoneService\n      .getAll()\n      .then(response => {\n        console.log('promise fulfilled')\n        setPersons(response.data)\n      })\n  }, [])\n  const handleName = (event) =>{\n    setNewName(event.target.value)\n  }\n  const handleNumber = (event) =>{\n    setNewNumber(event.target.value)\n  }\n  const handleFind =(event)=>{\n    setFindUserInput(event.target.value);\n    const find = persons.filter((item)=> item.name.toLowerCase().includes(event.target.value.toLowerCase()))\n    console.log(find)\n    setFindUser(find);\n  }\n\n\n\n  const submitForm = (event) => {\n    event.preventDefault();\n    const duplicate = persons.find((item)=>item.name===newName);\n    if(duplicate){\n      let id = duplicate.id;\n      const confirm = window.confirm(`${duplicate.name} is already added to phonebook, replace the old number with new one?`)\n      if (confirm){\n        const newDuplicateNumber = {...duplicate,number:newNumber};\n        phoneService.update(id,newDuplicateNumber).then((response)=>{\n          setPersons(persons.map((item)=> item.id!== id? item : response.data ))\n        }).then(response => {\n          setSuccess(true);\n          setMessage('Phone number of ' + duplicate.name+' is updated')\n          setTimeout(() => {\n            setMessage('');\n            setSuccess(null)\n          }, 4000)\n        } \n        ).catch((error)=>{\n          setSuccess(false);\n          setMessage('Error occur, '+duplicate.name + 'is already removed from server')\n        })        \n      }\n      setNewName('');\n      setNewNumber('')}\n    else {\n      const newPerson= {\n        name: newName,\n        number: newNumber\n      }\n      phoneService.create(newPerson).then((response)=>{\n        setPersons(persons.concat(response.data)); \n        setNewName('');\n        setNewNumber('');\n      }).then(response => {\n        setSuccess(true);\n        setMessage('Phone number of ' + newName+' is added')\n        setTimeout(() => {\n          setMessage('');\n          setSuccess(null)\n        }, 4000)\n      } \n      ).catch((error)=>{\n        setSuccess(false);\n        setMessage('Error occur, can not update user phone number')\n      }) \n      \n    }\n  }\n\n  const handleDelete=(id)=>{\n    const person = persons.find((item)=> item.id === id);\n    const confirm = window.confirm(`Delete ${person.name}?`)\n    if(confirm){\n      const filterPerson = persons.filter((item)=> item.id !==id)\n      phoneService.deleteItem(id).then(\n      setPersons(filterPerson)\n    ).catch((error)=>{\n      setSuccess(false);\n      setMessage('Error occur,'+person.name + ' is already removed from server')\n    });\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification success={success} message={message} />\n      <Filter handleFind={handleFind} findUserInput={findUserInput} />\n      <h3>Add a new</h3>\n      <PersonForm  submitForm={submitForm} handleName={handleName} handleNumber={handleNumber} newName={newName} newNumber={newNumber} />\n      <h2>Numbers</h2>\n      <Person handleDelete={handleDelete} persons={persons} findUserInput={findUserInput} findUser={findUser}/>\n     \n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}